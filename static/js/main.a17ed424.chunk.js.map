{"version":3,"sources":["components/ContactList/ContactItem/ContactItem.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","className","styles","form","preventDefault","htmlFor","input","type","pattern","title","required","onChange","id","button","ContactItem","contacts","deleteContact","map","onClick","defaultProps","ContactList","Filter","label","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","window","setItem","stringify","newContact","existContactName","find","contact","existContactNumber","existContact","alert","prevContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a17ed424.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactItem_button__1edSg\"};","import { useState } from \"react\";\nimport shortid from \"shortid\";\nimport styles from \"../ContactForm/ContactForm.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = () => shortid.generate();\n  const numberInputId = () => shortid.generate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    resetForm();\n  };\n\n  function resetForm() {\n    setName(\"\");\n    setNumber(\"\");\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          id={nameInputId}\n        />\n      </label>\n      <br />\n      <label htmlFor={numberInputId}>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          id={numberInputId}\n        />\n      </label>\n      <br />\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = { onSubmit: PropTypes.func.isRequired };\n\nexport default ContactForm;\n","import React from \"react\";\nimport styles from \"../ContactItem/ContactItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactItem = ({ contacts, deleteContact }) =>\n  contacts.map(({ id, name, number }) => {\n    return (\n      <li key={id}>\n        {name}: {number}\n        <button\n          className={styles.button}\n          type=\"button\"\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n\nContactItem.defaultProps = {\n  name: \"\",\n  number: \"\",\n  id: \"\",\n};\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from \"react\";\nimport ContactItem from \"./ContactItem/ContactItem\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    <ContactItem contacts={contacts} deleteContact={deleteContact} />\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n\n// const ContactList = ({ contacts }) => (\n//   <ul>\n//     {/* <ContactItem contacts={contacts} /> */}\n//     {contacts.map(({ id, name, number }) => (\n//       <li key={id}>\n//         {name}: {number}\n//       </li>\n//     ))}\n//   </ul>\n// );\n","import React from \"react\";\nimport styles from \"../Filter/Filter.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.label}>\n    Find contacts by name\n    <input\n      className={styles.input}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem(\"contacts\")) ?? [];\n  });\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const onFormSubmit = ({ name, number }) => {\n    const newContact = { id: shortid.generate(), name, number };\n\n    const existContactName = contacts.find((contact) => contact.name === name);\n\n    const existContactNumber = contacts.find(\n      (contact) => contact.number === number\n    );\n\n    const existContact =\n      (existContactName && `${name}`) || (existContactNumber && `${number}`);\n\n    existContactName || existContactNumber\n      ? alert(`${existContact} is already in contacts`)\n      : setContacts((prevContacts) => [newContact, ...prevContacts]);\n  };\n\n  const onDeleteContact = (id) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={onFormSubmit} />\n      <Filter value={filter} onChange={changeFilter} />\n      <h2>Contacts</h2>\n      <ContactList\n        contacts={getVisibleContacts()}\n        deleteContact={onDeleteContact}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1-oVx\",\"input\":\"ContactForm_input__1nNeB\",\"button\":\"ContactForm_button__2Jp0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__id4rx\",\"label\":\"Filter_label__3TifS\"};"],"sourceRoot":""}